// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client{
  provider = "prisma-client-js"
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  problemSets   ProblemSet[]    @relation(name: "UserProblemSets")
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String          @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?          @db.Text
  access_token      String?          @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model ProblemSet {
  id                  String                 @id @default(cuid())
  problemName         String
  problemId           String                 @unique
  description         String
  tags                String[]
  difficulty          Difficulty
  allTestCases        TestCase[]
  userId              String
  constraints         String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserProblemSets")
}

model TestCase {
  id                  String                 @id @default(cuid())
  input               String
  output              String
  problemSetId        String

  problemSet ProblemSet @relation(fields: [problemSetId],references:[id], onDelete: Cascade)
}

enum Difficulty {
  Easy
  Medium
  Hard
}